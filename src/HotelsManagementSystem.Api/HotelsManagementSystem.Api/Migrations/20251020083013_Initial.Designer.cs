// <auto-generated />
using System;
using HotelsManagementSystem.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelsManagementSystem.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020083013_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67aa3a13-dc24-4e0d-a873-316fa6fa02db"),
                            Name = "Free Wi-Fi"
                        },
                        new
                        {
                            Id = new Guid("06d0111e-902f-4017-9edb-1da1c797144f"),
                            Name = "24/7 Front Desk"
                        },
                        new
                        {
                            Id = new Guid("1cf0ae08-2c49-4def-84b9-fc7ac5297312"),
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("4fc7c1ba-048f-45ef-8bad-b20ea9a80fb3"),
                            Name = "Daily Housekeeping"
                        },
                        new
                        {
                            Id = new Guid("16cbcb7c-cbe4-4f87-b05b-0d4c58cf8a15"),
                            Name = "Free Parking"
                        },
                        new
                        {
                            Id = new Guid("b538f0e5-04e1-4474-a5d6-fc01656bd95a"),
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("49d554a2-79a3-4ab3-b07f-58172b13f05d"),
                            Name = "Fitness Center"
                        },
                        new
                        {
                            Id = new Guid("6c6f9939-bdf6-414d-8c13-cd1d3f982eaa"),
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = new Guid("c09e9e62-3f1c-4089-be2b-573c48733fcb"),
                            Name = "Bar/Lounge"
                        },
                        new
                        {
                            Id = new Guid("e7977074-02ca-4929-8e39-a608b6dcc688"),
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = new Guid("b4ebe6b5-a3f4-4576-99e7-fffa6524c83e"),
                            Name = "Room Service"
                        },
                        new
                        {
                            Id = new Guid("839c30b3-fe08-426f-abdc-583e71cde681"),
                            Name = "Spa Services"
                        },
                        new
                        {
                            Id = new Guid("99fcd557-8e82-457c-aa3b-0d80b35b7247"),
                            Name = "Valet Parking"
                        },
                        new
                        {
                            Id = new Guid("3f3e9b40-22b6-408a-98d7-c619d658bbe8"),
                            Name = "Airport Shuttle"
                        },
                        new
                        {
                            Id = new Guid("1c2b3ce5-b79c-4c38-b778-862e72c888f4"),
                            Name = "Laundry Service"
                        },
                        new
                        {
                            Id = new Guid("bd84aec1-c652-4b1d-9a20-add1004a059e"),
                            Name = "Parking"
                        },
                        new
                        {
                            Id = new Guid("2f30374d-318f-4c8f-b6f4-519c9e67e31d"),
                            Name = "Pet-Friendly Services"
                        },
                        new
                        {
                            Id = new Guid("5f9aaa06-091e-4293-ba7c-9ad136d75939"),
                            Name = "Conference Room"
                        },
                        new
                        {
                            Id = new Guid("6fecf1a8-26bc-4d07-a928-e9b60a53da98"),
                            Name = "Massage Services"
                        });
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("interval");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Country", "City", "IsDeleted");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.HotelAmenity", b =>
                {
                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.HasKey("AmenityId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelAmenities");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Images.HotelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Images.RoomImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReservationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManagedById");

                    b.HasIndex("CustomerId", "ReservationStatus");

                    b.HasIndex("RoomId", "CheckInDate", "CheckOutDate", "ReservationStatus");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HotelId", "IsDeleted");

                    b.HasIndex("CustomerId", "HotelId", "IsDeleted");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0e25c70-81c6-4469-b2ec-c49c5f9a7e61"),
                            Name = "Television"
                        },
                        new
                        {
                            Id = new Guid("3b157d4f-77a5-4467-a1c3-fa5f223d08d8"),
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("49156387-f737-4ea3-864a-47e609eb6868"),
                            Name = "Bathtub"
                        },
                        new
                        {
                            Id = new Guid("e07dff17-2e2a-4fb1-8345-0ddb8cada91e"),
                            Name = "Work Desk"
                        },
                        new
                        {
                            Id = new Guid("3dba9f20-bfdb-439f-9d6d-7cf975b74ce2"),
                            Name = "Hair Dryer"
                        },
                        new
                        {
                            Id = new Guid("995ddf14-27c5-477b-a0da-e3ee15223f6a"),
                            Name = "Wardrobe"
                        },
                        new
                        {
                            Id = new Guid("1766829f-2e48-4b61-9625-68542642dc71"),
                            Name = "Free Wi-Fi"
                        },
                        new
                        {
                            Id = new Guid("75e3e88d-af9e-48c0-bc68-30a323fdf69d"),
                            Name = "Telephone"
                        },
                        new
                        {
                            Id = new Guid("2f0b3756-1a0e-435c-b731-7647cbe62b04"),
                            Name = "Mini Bar"
                        },
                        new
                        {
                            Id = new Guid("6e014598-d414-4657-bf85-f8718860f241"),
                            Name = "Coffee Maker"
                        },
                        new
                        {
                            Id = new Guid("478f13b9-4980-4a09-801d-93bf7516dbb3"),
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("227ac5d8-6a18-4f62-b20b-2643860d05d8"),
                            Name = "Room Safe"
                        },
                        new
                        {
                            Id = new Guid("cbe09fd8-0a01-41ae-9bb6-938656793541"),
                            Name = "Jacuzzi"
                        },
                        new
                        {
                            Id = new Guid("750525d6-4527-481f-a8dc-7901f3669f57"),
                            Name = "Premium TV Channels"
                        },
                        new
                        {
                            Id = new Guid("4e04cd40-5717-4657-b55f-c520ecfec530"),
                            Name = "Ocean View"
                        },
                        new
                        {
                            Id = new Guid("8c9b59a8-caf1-48b0-b56a-111f8decb223"),
                            Name = "Sea View"
                        });
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("HotelId", "IsAvailable", "IsDeleted");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.RoomFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("FeatureId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFeatures");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PricePerNight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea97d300-b018-4ec4-a437-4b6d12560c4a"),
                            Capacity = 1,
                            Description = "A room assigned to one person. May have one or more beds.",
                            Name = "Single Room",
                            PricePerNight = 50.00m
                        },
                        new
                        {
                            Id = new Guid("93ee1182-dcad-4b9b-b1ab-7cbfdaa26b61"),
                            Capacity = 2,
                            Description = "A room assigned to two people. May have one or more beds.",
                            Name = "Double Room",
                            PricePerNight = 75.00m
                        },
                        new
                        {
                            Id = new Guid("a3861b00-0686-4aff-b284-3c855f591800"),
                            Capacity = 4,
                            Description = "A parlour or living room connected with to one or more bedrooms.",
                            Name = "Suite",
                            PricePerNight = 150.00m
                        },
                        new
                        {
                            Id = new Guid("06a99c54-9756-442c-9fca-ba44689e6e51"),
                            Capacity = 5,
                            Description = "A room that is large enough to accommodate a family.",
                            Name = "Family Room",
                            PricePerNight = 120.00m
                        },
                        new
                        {
                            Id = new Guid("e117e9ae-eba0-4096-bbd7-872fac631285"),
                            Capacity = 3,
                            Description = "A room with luxurious amenities, furnishings, and a high level of comfort.",
                            Name = "Deluxe Room",
                            PricePerNight = 200.00m
                        },
                        new
                        {
                            Id = new Guid("b5f483eb-10a3-4db6-88c1-882a595378a9"),
                            Capacity = 6,
                            Description = "The most luxurious suite in the hotel, often featuring multiple rooms and premium amenities.",
                            Name = "Presidential Suite",
                            PricePerNight = 500.00m
                        },
                        new
                        {
                            Id = new Guid("2df403be-f9ab-48da-9e16-1cbc319eef80"),
                            Capacity = 2,
                            Description = "A basic room with essential amenities at a budget-friendly price.",
                            Name = "Economy Room",
                            PricePerNight = 40.00m
                        },
                        new
                        {
                            Id = new Guid("325eb995-91f9-4e33-95af-b70d0257019e"),
                            Capacity = 2,
                            Description = "A room designed to accommodate guests with disabilities, featuring accessibility features.",
                            Name = "Accessible Room",
                            PricePerNight = 80.00m
                        },
                        new
                        {
                            Id = new Guid("ce49fe44-a94b-42f0-8155-f54333cb90cb"),
                            Capacity = 3,
                            Description = "Accommodates three people and may have a combination of beds like one double and one twin, or three twin beds.",
                            Name = "Triple Room",
                            PricePerNight = 90.00m
                        },
                        new
                        {
                            Id = new Guid("b568db37-9bce-4000-874b-92d014df4080"),
                            Capacity = 2,
                            Description = "Contains two separate single beds.",
                            Name = "Twin Room",
                            PricePerNight = 70.00m
                        });
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Admin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Receptionist", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("HotelId");

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.Admin", "Creator")
                        .WithMany("CreatedHotels")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.HotelAmenity", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Amenity", "Amenity")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", "Hotel")
                        .WithMany("HotelAmenities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Images.HotelImage", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", "Hotel")
                        .WithMany("Images")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Images.RoomImage", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Rooms.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Reservations.Reservation", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.Receptionist", "ManagedBy")
                        .WithMany("ManagedReservations")
                        .HasForeignKey("ManagedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Rooms.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ManagedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Reviews.Review", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.Customer", "Customer")
                        .WithMany("HotelReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.Room", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.Admin", "Creator")
                        .WithMany("CreatedRooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Rooms.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.RoomFeature", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Rooms.Feature", "Feature")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Rooms.Room", "Room")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Admin", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", "User")
                        .WithOne("Admin")
                        .HasForeignKey("HotelsManagementSystem.Api.Data.Models.Users.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Customer", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("HotelsManagementSystem.Api.Data.Models.Users.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Receptionist", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", "Hotel")
                        .WithMany("Receptionists")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", "User")
                        .WithOne("Receptionist")
                        .HasForeignKey("HotelsManagementSystem.Api.Data.Models.Users.Receptionist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.Amenity", b =>
                {
                    b.Navigation("HotelAmenities");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Hotels.Hotel", b =>
                {
                    b.Navigation("HotelAmenities");

                    b.Navigation("Images");

                    b.Navigation("Receptionists");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.Feature", b =>
                {
                    b.Navigation("RoomFeatures");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomFeatures");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Rooms.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Admin", b =>
                {
                    b.Navigation("CreatedHotels");

                    b.Navigation("CreatedRooms");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Customer", b =>
                {
                    b.Navigation("HotelReviews");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelsManagementSystem.Api.Data.Models.Users.Receptionist", b =>
                {
                    b.Navigation("ManagedReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
